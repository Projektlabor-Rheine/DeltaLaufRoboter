import math
import DeltaLaufRoboter as botti
from adafruit_servokit import ServoKit
import time
import RPi.GPIO as gpio
import multiprocessing

#Max and min values for the servos
minX = -40
maxX = 40
minZ = -120
maxZ = -170

class Mover(multiprocessing.Process):
    def __init__(self):
        multiprocessing.Process.__init__(self)
        self.rot = 0

    def setRotation(self,rot):
       self.rot=rot
       self.rot%=360

    def addRotation(self,rot):
       self.setRotation(self.rot+rot)

    def run(self):
        t=.4

        while True:
            #A up
            print("Rot:{}".format(self.rot))
            g
            time.sleep(t)

            #B back
            groupB.moveRot(50+self.rot,100,0)
            time.sleep(t)

            #A fordown
            groupA.moveRot(self.rot,100,0)
            time.sleep(t)

            #B up
            groupB.moveRot(self.rot,0,100)
            time.sleep(t)

            #A back
            groupA.moveRot(50+self.rot,100,0)
            time.sleep(t)

            #B forward
            groupB.moveRot(self.rot,100,0)
            time.sleep(t)

mover = Mover()

class InputManager(multiprocessing.Process):
    def __init__(self):
        multiprocessing.Process.__init__(self)
        self.five = 0
        self.six = 0

    def run(self):
        #Setup for the buttons
        gpio.setup(5,gpio.IN)
        gpio.setup(6,gpio.IN)
        while True:
           #Checks the buttons
           inFiv = gpio.input(5)
           inSix = gpio.input(6)

           #Checks if five got updated
           if inFiv != self.five:
               self.five=inFiv
               self.handleUpdate(5,inFiv)

           #Checks if six got updated
           if inSix != self.six:
               self.six=inSix
               self.handleUpdate(6,inSix)

    def handleUpdate(self,inp,val):
        global mover
        if inp == 5:
           mover.addRotation(90)
        print("{}:{}".format(inp,val))

class Group():
    def __init__(self, address,defaultRot):
        self.defaultRot = defaultRot/360*100
        self.ref = ServoKit(channels=16,address=address)
        for i in range(16):
            self.ref.servo[i].actuation_range = 120
        self.x = 0
        self.y = 0
        self.z = 0

    def moveRot(self,rot,extend,height):
        rot+=self.defaultRot
        rad = math.pi*2*(rot/100)
        x = math.cos(rad)*((maxX-minX)/2)*(extend/100)
        y = math.sin(rad)*((maxX-minX)/2)*(extend/100)
        z = (maxZ-minZ)*(height/100)+minZ

        self.move(x,y,z)

    def move(self,x=None,y=None,z=None):
        if x == None:
            x = self.x

        if y == None:
            y = self.y

        if z == None:
            z = self.z

        #Checks if the group has to move 
        if x != self.x or y != self.y or z != self.z:
            #Calculates the new positions
            botX,botY,botZ = botti.delta_calcInverse(x,y,z)
            r=0
            for i in range(0,10,4):
                self.ref.servo[i].angle = -botX+87
                self.ref.servo[i+1].angle = -botY+87
                self.ref.servo[i+2].angle = -botZ+87
                r+=3

    def angle(self,botX,botY,botZ):
        r=0
        for i in range(0,10,4):
            self.ref.servo[i].angle = botX
            self.ref.servo[i+1].angle = botY
            self.ref.servo[i+2].angle = botZ
            r+=3

groupA = Group(0x40,0)
groupB = Group(0x60,60)

mover.start()

inpmanager = InputManager()
inpmanager.start()
'''
def s():
    time.sleep(.5)

while True:
    #A up
    groupA.moveRot(0,0,100)
    s()
    #B back
    groupB.moveRot(50,100,0)
    s()
    #A fordown
    groupA.moveRot(0,100,0)
    s()
    #B up
    groupB.moveRot(0,0,100)
    s()
    #A back
    groupA.moveRot(50,100,0)
    s()
    #B forward
    groupB.moveRot(0,100,0)
    s()

'''
'''
gpio.setup(6,gpio.IN)

while True:
    print(gpio.input(6))
    time.sleep(.5)
'''
